// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: client/godiploma/cipher/v1/cipher_api.proto

package cipherv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _cipher_api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateStegoImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStegoImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStegoImageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStegoImageRequestMultiError, or nil if none found.
func (m *CreateStegoImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStegoImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		err = CreateStegoImageRequestValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateStegoImageRequest_Method_NotInLookup[m.GetMethod()]; ok {
		err := CreateStegoImageRequestValidationError{
			field:  "Method",
			reason: "value must not be in list [METHOD_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Method_name[int32(m.GetMethod())]; !ok {
		err := CreateStegoImageRequestValidationError{
			field:  "Method",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlaintext()) < 1 {
		err := CreateStegoImageRequestValidationError{
			field:  "Plaintext",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetFiles()) < 1 {
		err := CreateStegoImageRequestValidationError{
			field:  "Files",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateStegoImageRequestValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateStegoImageRequestValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateStegoImageRequestValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateStegoImageRequestMultiError(errors)
	}

	return nil
}

func (m *CreateStegoImageRequest) _validateUuid(uuid string) error {
	if matched := _cipher_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateStegoImageRequestMultiError is an error wrapping multiple validation
// errors returned by CreateStegoImageRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateStegoImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStegoImageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStegoImageRequestMultiError) AllErrors() []error { return m }

// CreateStegoImageRequestValidationError is the validation error returned by
// CreateStegoImageRequest.Validate if the designated constraints aren't met.
type CreateStegoImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStegoImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStegoImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStegoImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStegoImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStegoImageRequestValidationError) ErrorName() string {
	return "CreateStegoImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStegoImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStegoImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStegoImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStegoImageRequestValidationError{}

var _CreateStegoImageRequest_Method_NotInLookup = map[Method]struct{}{
	0: {},
}

// Validate checks the field values on CreateStegoImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStegoImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStegoImageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStegoImageResponseMultiError, or nil if none found.
func (m *CreateStegoImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStegoImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateStegoImageResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateStegoImageResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateStegoImageResponseValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateStegoImageResponseMultiError(errors)
	}

	return nil
}

// CreateStegoImageResponseMultiError is an error wrapping multiple validation
// errors returned by CreateStegoImageResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateStegoImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStegoImageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStegoImageResponseMultiError) AllErrors() []error { return m }

// CreateStegoImageResponseValidationError is the validation error returned by
// CreateStegoImageResponse.Validate if the designated constraints aren't met.
type CreateStegoImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStegoImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStegoImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStegoImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStegoImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStegoImageResponseValidationError) ErrorName() string {
	return "CreateStegoImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStegoImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStegoImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStegoImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStegoImageResponseValidationError{}

// Validate checks the field values on ExtractRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExtractRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtractRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtractRequestMultiError,
// or nil if none found.
func (m *ExtractRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtractRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		err = ExtractRequestValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ExtractRequest_Method_NotInLookup[m.GetMethod()]; ok {
		err := ExtractRequestValidationError{
			field:  "Method",
			reason: "value must not be in list [METHOD_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Method_name[int32(m.GetMethod())]; !ok {
		err := ExtractRequestValidationError{
			field:  "Method",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetFiles()) < 1 {
		err := ExtractRequestValidationError{
			field:  "Files",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExtractRequestValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExtractRequestValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExtractRequestValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExtractRequestMultiError(errors)
	}

	return nil
}

func (m *ExtractRequest) _validateUuid(uuid string) error {
	if matched := _cipher_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ExtractRequestMultiError is an error wrapping multiple validation errors
// returned by ExtractRequest.ValidateAll() if the designated constraints
// aren't met.
type ExtractRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtractRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtractRequestMultiError) AllErrors() []error { return m }

// ExtractRequestValidationError is the validation error returned by
// ExtractRequest.Validate if the designated constraints aren't met.
type ExtractRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtractRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtractRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtractRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtractRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtractRequestValidationError) ErrorName() string { return "ExtractRequestValidationError" }

// Error satisfies the builtin error interface
func (e ExtractRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtractRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtractRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtractRequestValidationError{}

var _ExtractRequest_Method_NotInLookup = map[Method]struct{}{
	0: {},
}

// Validate checks the field values on ExtractResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExtractResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtractResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtractResponseMultiError, or nil if none found.
func (m *ExtractResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtractResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExtractResponseMultiError(errors)
	}

	return nil
}

// ExtractResponseMultiError is an error wrapping multiple validation errors
// returned by ExtractResponse.ValidateAll() if the designated constraints
// aren't met.
type ExtractResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtractResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtractResponseMultiError) AllErrors() []error { return m }

// ExtractResponseValidationError is the validation error returned by
// ExtractResponse.Validate if the designated constraints aren't met.
type ExtractResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtractResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtractResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtractResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtractResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtractResponseValidationError) ErrorName() string { return "ExtractResponseValidationError" }

// Error satisfies the builtin error interface
func (e ExtractResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtractResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtractResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtractResponseValidationError{}
