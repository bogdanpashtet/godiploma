// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: client/godiploma/file/v1/file_api.proto

package filev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _file_api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UploadDocumentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadDocumentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadDocumentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadDocumentsRequestMultiError, or nil if none found.
func (m *UploadDocumentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadDocumentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetRequestId()); err != nil {
		err = UploadDocumentsRequestValidationError{
			field:  "RequestId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetDocuments()) < 1 {
		err := UploadDocumentsRequestValidationError{
			field:  "Documents",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDocuments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UploadDocumentsRequestValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UploadDocumentsRequestValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UploadDocumentsRequestValidationError{
					field:  fmt.Sprintf("Documents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UploadDocumentsRequestMultiError(errors)
	}

	return nil
}

func (m *UploadDocumentsRequest) _validateUuid(uuid string) error {
	if matched := _file_api_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UploadDocumentsRequestMultiError is an error wrapping multiple validation
// errors returned by UploadDocumentsRequest.ValidateAll() if the designated
// constraints aren't met.
type UploadDocumentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadDocumentsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadDocumentsRequestMultiError) AllErrors() []error { return m }

// UploadDocumentsRequestValidationError is the validation error returned by
// UploadDocumentsRequest.Validate if the designated constraints aren't met.
type UploadDocumentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadDocumentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadDocumentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadDocumentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadDocumentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadDocumentsRequestValidationError) ErrorName() string {
	return "UploadDocumentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadDocumentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadDocumentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadDocumentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadDocumentsRequestValidationError{}

// Validate checks the field values on UploadDocumentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadDocumentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadDocumentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadDocumentsResponseMultiError, or nil if none found.
func (m *UploadDocumentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadDocumentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UploadDocumentsResponseMultiError(errors)
	}

	return nil
}

// UploadDocumentsResponseMultiError is an error wrapping multiple validation
// errors returned by UploadDocumentsResponse.ValidateAll() if the designated
// constraints aren't met.
type UploadDocumentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadDocumentsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadDocumentsResponseMultiError) AllErrors() []error { return m }

// UploadDocumentsResponseValidationError is the validation error returned by
// UploadDocumentsResponse.Validate if the designated constraints aren't met.
type UploadDocumentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadDocumentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadDocumentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadDocumentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadDocumentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadDocumentsResponseValidationError) ErrorName() string {
	return "UploadDocumentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadDocumentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadDocumentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadDocumentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadDocumentsResponseValidationError{}
