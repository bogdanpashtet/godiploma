# https://github.com/go-task/task
version: "3"

vars:
  SERVICE_NAME: "godiploma"
  APP_VERSION: v0.3.16
  # Go env.
  GOBIN: $(pwd)/bin
  # Lib versions.
  GO_VERSION: 1.24.0
  REMOTE: origin main

tasks:
  default:
    cmds:
      - task: go-mod-tidy
      - task: fmt
      - task: lint
      - task: test
      - task: isolation-tests

# BUILD & CHECKS
  gen-mocks:
    desc: "Generate mocks"
    cmds:
      - go tool mockery

  fmt:
    desc: "format code"
    cmds:
      - gofmt -w -l .

  lint:
    desc: "run lint"
    cmds:
      - go tool golangci-lint run {{ default "--timeout=10m" .CLI_ARGS }}

  pretty:
    desc: "prettify code"
    deps: [ fmt, lint ]

  test:
    desc: "run unit tests with coverage"
    cmds:
      - GOPATH=$GOPATH GOBIN={{ .GOBIN }} go clean --testcache
      - GOPATH=$GOPATH GOBIN={{ .GOBIN }} go test -v -race $(go list ./... | grep -v test) -coverprofile=.coverage.out
      - GOPATH=$GOPATH GOBIN={{ .GOBIN }} go tool cover -func=.coverage.out | tail -n1

  build-locally:
    desc: "build the app locally"
    cmds:
      - docker build -t {{ .SERVICE_NAME }}-local --build-arg GOLANG_VERSION={{ .GO_VERSION }} --build-arg APP_VERSION=development . -f ./Dockerfile

  run-locally:
    desc: "run the app locally using the specified config file"
    cmds:
      - CONFIG_PATH="./config/config.yaml" go run -trimpath ./cmd/{{ .SERVICE_NAME }}/main.go

  isolation-tests:
    desc: "run isolation tests"
    dotenv: [ ".env" ]
    cmds:
      - GOPATH=$GOPATH go clean --testcache
      - GOPATH=$GOPATH go test -race -v ./test/cases/...

  go-mod-tidy:
    desc: "Run go mod tidy"
    cmds:
      - go mod tidy

  update-libraries:
    desc: "Update versions of used libraries"
    cmds:
      - go get -u ./... && go mod tidy

# PROTO
  gen-proto:
    cmds:
      - task: lint-proto
      - task: generate
  lint-proto:
    desc: "Lint proto files"
    cmds:
      - go tool buf lint
      - go tool buf breaking --against ".git#ref=$(git merge-base main HEAD)" || true
  generate:
    desc: "Generate code from proto files"
    cmds:
      - ./protos/scripts/buf/cleanup.sh
      - go tool buf generate
      - ./protos/scripts/buf/go-code-compile-check.sh

# RELEASE
  bump:patch:
    aliases:
      - bump
    desc: 'Up patch version (0.0.X)'
    cmds:
      - bump-my-version bump patch

  bump:minor:
    desc: 'Up minor version (0.X.0)'
    cmds:
      - bump-my-version bump minor

  bump:major:
    desc: 'Up major version (X.0.0)'
    cmds:
      - bump-my-version bump major

  bump:push:
    desc: 'Send last commits and tags to remote repository ({{.REMOTE}})'
    cmds:
      - git push {{.REMOTE}}
      - git push {{.REMOTE}} --tags

  release:patch:
    aliases:
      - release
    desc: 'Up patch version and push into {{.REMOTE}}'
    deps: [bump:patch]
    cmds:
      - task: bump:push

  release:minor:
    desc: 'Up minor version and push into {{.REMOTE}}'
    deps: [bump:minor]
    cmds:
      - task: bump:push

  release:major:
    desc: 'Up major version and push into {{.REMOTE}}'
    deps: [bump:major]
    cmds:
      - task: bump:push

# UTILS
  base64:
    desc: "Encode file to Base64 -> ./files/byte/<name>.txt"
    cmds:
      - chmod +x ./scripts/file_to_base64.sh
      - ./scripts/file_to_base64.sh {{.CLI_ARGS}}

  base64-to-file:
    desc: "Decode Base64 <in_file> to ./files/res/<name>_<timestamp>.<type> using <out_type>"
    summary: |
      # Minimal summary with usage
      Usage: task base64-to-file -- <input_base64_txt_file> <output_file_type>
      Example: task base64-to-file -- ./files/byte/image.txt png
    cmds:
      - chmod +x ./scripts/base64_to_file.sh
      - ./scripts/base64_to_file.sh {{.CLI_ARGS}}

  profile:
    desc: "Collect & serve pprof profiles for a given service name"
    summary: |
      Runs the profiling script which:
      1. Creates a directory named <service_name>-YYYYMM.
      2. Collects pprof data (cpu, heap, trace, etc.) using curl from http://localhost:9201.
      3. Serves the collected profiles using 'go tool pprof/trace' on ports 8080-8086.
      4. Attempts to open the profile URLs in the default browser (NOTE: Script has a port mismatch error here!).

      Usage:
        task profile -- <service_name>

      Example:
        task profile -- my-api-service
    vars:
      SERVICE_NAME:
        sh: |
          if [ -z "{{index .CLI_ARGS 0}}" ]; then
            echo "Error: Service name argument is required." >&2
            echo "Usage: task profile -- <service_name>" >&2
            exit 1
          fi
          echo "{{index .CLI_ARGS 0}}"
    cmds:
      - chmod +x ./scripts/collect_profiles.sh
      - ./scripts/collect_profiles.sh {{.SERVICE_NAME}}